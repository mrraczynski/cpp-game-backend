name: autotests

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  sprint_1_2:
    runs-on: ubuntu-22.04
    container:
      image: praktikumcpp/practicum_cpp_backend:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      options: --name main-container
    steps:
      - name: get docker network
        run: echo "DOCKER_NETWORK=$(docker inspect main-container -f '{{range $k, $v := .NetworkSettings.Networks}}{{printf "%s" $k}}{{end}}')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load tests
        uses: actions/checkout@v3
        with:
          repository: 'cpppracticum/cpp-backend-tests-practicum'
          path: 'cpp-backend-tests-practicum'

      - name: Install dependencies
        run: |
          cp -R /home/forconan/.conan /github/home/.conan

      - name: build tests sprint1 map_json
        run: |
          cd sprint1/problems/map_json/solution
          mkdir build
          cd build
          conan install ..
          cmake ..
          cmake --build .
          echo "COMMAND_RUN=${DELIVERY_APP} ${CONFIG_PATH}" >> $GITHUB_ENV
        env:
          DELIVERY_APP: ${{ github.workspace }}/sprint1/problems/map_json/solution/build/bin/game_server
          CONFIG_PATH: ${{ github.workspace }}/sprint1/problems/map_json/solution/data/config.json

      - name: Save map_json binary
        uses: actions/upload-artifact@v3
        with:
          name: game_server
          path: ${{ github.workspace }}/sprint1/problems/map_json/solution/build/bin/game_server
          retention-days: 1

      - name: run tests sprint1 map_json
        run: pytest --junitxml=${GITHUB_WORKSPACE}/map_json.xml cpp-backend-tests-practicum/tests/test_l04_map_json.py
        env:
          DELIVERY_APP: ${{ github.workspace }}/sprint1/problems/map_json/solution/build/bin/game_server
          CONFIG_PATH: ${{ github.workspace }}/sprint1/problems/map_json/solution/data/config.json

      - name: Publish XML reports
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: ${{ github.workspace }}/*.xml

  sprint_3_4:
    runs-on: ubuntu-22.04
    needs: sprint_1_2
    steps:
      - name: Install dependencies
        run: |
          sudo pip3 install --no-cache-dir \
            pytest==7.1.2 \
            pytest-parallel==0.1.1 \
            pytest-xprocess==0.20.0 \
            pytest-quickcheck==0.9.0 \
            conan \
            docker
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load tests
        uses: actions/checkout@v3
        with:
          repository: 'cpppracticum/cpp-backend-tests-practicum'
          path: 'cpp-backend-tests-practicum'

      - name: Load map_json binary
        uses: actions/download-artifact@v3
        with:
          name: game_server
          path: ${{ github.workspace }}/sprint1/problems/map_json/solution/build/bin

      - run: chmod +x ${GITHUB_WORKSPACE}/sprint1/problems/map_json/solution/build/bin/game_server

      - name: Load FlameGraph
        uses: actions/checkout@v3
        with:
          repository: 'brendangregg/FlameGraph'
          path: ${{ github.workspace }}/sprint3/problems/flamegraph/solution/FlameGraph

      - name: build tests sprint4 state_serialization
        run: |
          cd sprint4/problems/state_serialization/solution
          docker build -t state_serialization .
          mkdir ${GITHUB_WORKSPACE}/sprint4/problems/state_serialization/volume
          chmod 777 ${GITHUB_WORKSPACE}/sprint4/problems/state_serialization/volume
      - name: run tests sprint4 state_serialization
        run: pytest --junitxml=${GITHUB_WORKSPACE}/state_serialization.xml cpp-backend-tests-practicum/tests/test_s04_state_serialization.py
        env:
          IMAGE_NAME: state_serialization
          CONFIG_PATH: ${{ github.workspace }}/sprint4/problems/state_serialization/solution/data/config.json
          VOLUME_PATH: ${{ github.workspace }}/sprint4/problems/state_serialization/volume

      - name: Publish XML reports
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: ${{ github.workspace }}/*.xml

  with_server:
    runs-on: ubuntu-22.04
    container:
      image: praktikumcpp/practicum_cpp_backend_server:latest
      options: --privileged
    services:
      cppserver:
        image: praktikumcpp/game_server:latest
        ports:
          - 8080:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load tests
        uses: actions/checkout@v3
        with:
          repository: 'cpppracticum/cpp-backend-tests-practicum'
          path: 'cpp-backend-tests-practicum'

      - name: run tests sprint3 ammo
        run: |
          cd sprint3/problems/ammo/solution
          yandex-tank -c ${GITHUB_WORKSPACE}/sprint3/problems/ammo/solution/load.yaml ${GITHUB_WORKSPACE}/sprint3/problems/ammo/solution/ammo.txt
          pytest --junitxml=${GITHUB_WORKSPACE}/ammo.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s03_ammo.py
        env:
          DIRECTORY: ${{ github.workspace }}/sprint3/problems/ammo/solution/logs

      - name: run tests sprint3 load
        run: |
          cd sprint3/problems/load/solution
          yandex-tank -c ${GITHUB_WORKSPACE}/sprint3/problems/load/solution/load.yaml ${GITHUB_WORKSPACE}/sprint3/problems/load/solution/ammo.txt
          pytest --junitxml=${GITHUB_WORKSPACE}/load.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s03_load.py
        env:
          DIRECTORY: ${{ github.workspace }}/sprint3/problems/load/solution/logs

#      - name: run tests sprint3 stress
#        run: |
#          cd sprint3/problems/stress/solution
#          yandex-tank -c ${GITHUB_WORKSPACE}/sprint3/problems/stress/solution/load.yaml ${GITHUB_WORKSPACE}/sprint3/problems/stress/solution/ammo.txt
#          pytest --junitxml=${GITHUB_WORKSPACE}/stress.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s03_stress.py
#        env:
#          DIRECTORY: ${{ github.workspace }}/sprint3/problems/stress/solution/logs

      - name: Publish XML reports
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: ${{ github.workspace }}/*.xml


  with_postgress:
    runs-on: ubuntu-22.04
    container:
      image: praktikumcpp/practicum_cpp_backend:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      options: --name main-container
    services:
      postgres:
        image: ubuntu/postgres:14-22.04_beta
        env:
          POSTGRES_PASSWORD: Mys3Cr3t
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432

    steps:
      - name: get docker network
        run: |
          echo "DOCKER_NETWORK=$(docker inspect main-container -f '{{range $k, $v := .NetworkSettings.Networks}}{{printf "%s" $k}}{{end}}')" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load tests
        uses: actions/checkout@v3
        with:
          repository: 'cpppracticum/cpp-backend-tests-practicum'
          path: 'cpp-backend-tests-practicum'

      - name: Install dependencies
        run: |
          cp -R /home/forconan/.conan /github/home/.conan

      - name: build sprint4 bookypedia-1
        run: |
          cd sprint4/problems/bookypedia-1/solution
          mkdir build
          cd build
          conan install ..
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .
      - name: run tests sprint4 bookypedia-1
        run: pytest --junitxml=${GITHUB_WORKSPACE}/bookypedia-1.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s04_bookypedia-1.py
        env:
          DELIVERY_APP: ${{ github.workspace }}/sprint4/problems/bookypedia-1/solution/build/bookypedia


      - name: build sprint4 bookypedia-2
        run: |
          cd sprint4/problems/bookypedia-2/solution
          mkdir build
          cd build
          conan install ..
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=Mys3Cr3t" >> $GITHUB_ENV
          echo "POSTGRES_HOST=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
      - name: run tests sprint4 bookypedia-2
        run: pytest --junitxml=${GITHUB_WORKSPACE}/bookypedia-2.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s04_bookypedia-2.py
        env:
          DELIVERY_APP: ${{ github.workspace }}/sprint4/problems/bookypedia-2/solution/build/bookypedia

      - name: build sprint4 leave_game
        run: |
          cd sprint4/problems/leave_game/solution
          docker build -t leave_game .
      - name: run tests sprint4 leave_game
        run: pytest --workers 4 --junitxml=${GITHUB_WORKSPACE}/leave_game.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s04_leave_game.py
        env:
          CONFIG_PATH: ${{ github.workspace }}/sprint4/problems/leave_game/solution/data/config.json
          IMAGE_NAME: leave_game
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Mys3Cr3t
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432


      - name: Publish XML reports
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: ${{ github.workspace }}/*.xml
