name: autotests

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-22.04
    container:
      image: praktikumcpp/practicum_cpp_backend:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /usr/bin/perf:/usr/bin/perf
        - /usr/lib/linux-tools:/usr/lib/linux-tools
        - /usr/lib/linux-azure-tools-5.15.0-1022:/usr/lib/linux-azure-tools-5.15.0-1022
      options: --privileged --name main-container
    steps:
      - name: get docker network
        run: echo "DOCKER_NETWORK=$(docker inspect main-container -f '{{range $k, $v := .NetworkSettings.Networks}}{{printf "%s" $k}}{{end}}')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load tests
        uses: actions/checkout@v2
        with:
          repository: 'cpppracticum/cpp-backend-tests-practicum'
          path: 'cpp-backend-tests-practicum'

      - name: Install dependencies
        run: |
          cp -R /home/forconan/.conan /github/home/.conan

      - name: build tests sprint2 game_state
        run: |
          cd sprint2/problems/game_state/solution
          docker build -t game_state .
          echo "COMMAND_RUN=docker run --rm --network ${DOCKER_NETWORK} --name cppserver -p 8080:8080 game_state" >> $GITHUB_ENV

      - name: run tests sprint2 game_state
        run: pytest --junitxml=game_state.xml cpp-backend-tests-practicum/tests/test_s02_game_state.py
        env:
          SERVER_DOMAIN: cppserver

      - name: build tests sprint2 move_players
        run: |
          cd sprint2/problems/move_players/solution
          docker build -t my_http_server .
          echo "COMMAND_RUN=docker run --rm --network ${DOCKER_NETWORK} --name cppserver -p 8080:8080 my_http_server" >> $GITHUB_ENV

      - name: run tests sprint2 move_players
        run: pytest --junitxml=move_players.xml cpp-backend-tests-practicum/tests/test_s02_move_players.py
        env:
          SERVER_DOMAIN: cppserver

      - name: build tests sprint2 time_control
        run: |
          cd sprint2/problems/time_control/solution
          docker build -t time_control .
          echo "COMMAND_RUN=docker run --rm --entrypoint /app/game_server --network ${DOCKER_NETWORK} --name cppserver -p 8080:8080 time_control --config-file /app/data/config.json --www-root /app/static/" >> $GITHUB_ENV

      - name: run tests sprint2 time_control
        run: pytest --junitxml=time_control.xml cpp-backend-tests-practicum/tests/test_s02_time_control.py
        env:
          SERVER_DOMAIN: cppserver

      - name: build tests sprint2 command_line
        run: |
          cd sprint2/problems/command_line/solution
          docker build -t command_line .
          echo "COMMAND_RUN=docker run --rm --entrypoint /app/game_server --network ${DOCKER_NETWORK} --name cppserver -p 8080:8080 command_line --config-file /app/data/config.json --www-root /app/static/" >> $GITHUB_ENV

      - name: run tests sprint2 command_line
        run: pytest --junitxml=command_line.xml cpp-backend-tests-practicum/tests/test_s02_command_line.py
        env:
          SERVER_DOMAIN: cppserver

      - name: build tests sprint3 instrumentation
        run: |
          cd sprint3/problems/instrumentation/solution/v2
          g++ -O3 *.cpp -o event2dot

      - name: run tests sprint3 instrumentation
        run: pytest --junitxml=instrumentation.xml cpp-backend-tests-practicum/tests/test_s03_instrumentation.py
        env:
          REPORT_PATH: ${{ github.workspace }}/sprint3/problems/instrumentation/solution/report
          BINARY_PATH: ${{ github.workspace }}/sprint3/problems/instrumentation/solution/v2/event2dot
          ARG: ${{ github.workspace }}/sprint3/problems/instrumentation/solution/v2/inputs

      - name: Load FlameGraph
        uses: actions/checkout@v2
        with:
          repository: 'brendangregg/FlameGraph'
          path: ${{ github.workspace }}/sprint3/problems/flamegraph/solution/FlameGraph

      - name: run tests sprint3 flamegraph
        run: |
          cd sprint3/problems/flamegraph/solution
          python3 shoot.py "${GITHUB_WORKSPACE}/sprint1/problems/map_json/solution/build/bin/game_server ${GITHUB_WORKSPACE}/sprint1/problems/map_json/solution/data/config.json" || true
          ls -l
#          pytest --junitxml=flamegraph.xml ${GITHUB_WORKSPACE}/cpp-backend-tests-practicum/tests/test_s03_flamegraph.py
        env:
          DIRECTORY: ${{ github.workspace }}/sprint3/problems/flamegraph/solution

      - name: Publish XML reports
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./*.xml
